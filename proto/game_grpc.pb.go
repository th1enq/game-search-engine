// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: game.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Games_SearchAll_FullMethodName            = "/game.Games/SearchAll"
	Games_SearchByName_FullMethodName         = "/game.Games/SearchByName"
	Games_SearchByGenre_FullMethodName        = "/game.Games/SearchByGenre"
	Games_SearchByPlatform_FullMethodName     = "/game.Games/SearchByPlatform"
	Games_SearchByReleaseRange_FullMethodName = "/game.Games/SearchByReleaseRange"
	Games_SearchByRating_FullMethodName       = "/game.Games/SearchByRating"
	Games_AdvancedSearch_FullMethodName       = "/game.Games/AdvancedSearch"
	Games_CreateGame_FullMethodName           = "/game.Games/CreateGame"
	Games_UpdateGame_FullMethodName           = "/game.Games/UpdateGame"
	Games_DeleteGame_FullMethodName           = "/game.Games/DeleteGame"
)

// GamesClient is the client API for Games service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GamesClient interface {
	// ---------- Search ----------
	SearchAll(ctx context.Context, in *SearchAllRequest, opts ...grpc.CallOption) (*GamesResponse, error)
	SearchByName(ctx context.Context, in *SearchByNameRequest, opts ...grpc.CallOption) (*GameResponse, error)
	SearchByGenre(ctx context.Context, in *SearchByGenreRequest, opts ...grpc.CallOption) (*GamesResponse, error)
	SearchByPlatform(ctx context.Context, in *SearchByPlatformRequest, opts ...grpc.CallOption) (*GamesResponse, error)
	SearchByReleaseRange(ctx context.Context, in *SearchByReleaseRangeRequest, opts ...grpc.CallOption) (*GamesResponse, error)
	SearchByRating(ctx context.Context, in *SearchByRatingRequest, opts ...grpc.CallOption) (*GamesResponse, error)
	AdvancedSearch(ctx context.Context, in *AdvancedSearchRequest, opts ...grpc.CallOption) (*GamesResponse, error)
	// ---------- Create ----------
	CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*GameResponse, error)
	// ---------- Update ----------
	UpdateGame(ctx context.Context, in *UpdateGameRequest, opts ...grpc.CallOption) (*GameResponse, error)
	// ---------- Delete ----------
	DeleteGame(ctx context.Context, in *DeleteGameRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type gamesClient struct {
	cc grpc.ClientConnInterface
}

func NewGamesClient(cc grpc.ClientConnInterface) GamesClient {
	return &gamesClient{cc}
}

func (c *gamesClient) SearchAll(ctx context.Context, in *SearchAllRequest, opts ...grpc.CallOption) (*GamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GamesResponse)
	err := c.cc.Invoke(ctx, Games_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gamesClient) SearchByName(ctx context.Context, in *SearchByNameRequest, opts ...grpc.CallOption) (*GameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameResponse)
	err := c.cc.Invoke(ctx, Games_SearchByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gamesClient) SearchByGenre(ctx context.Context, in *SearchByGenreRequest, opts ...grpc.CallOption) (*GamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GamesResponse)
	err := c.cc.Invoke(ctx, Games_SearchByGenre_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gamesClient) SearchByPlatform(ctx context.Context, in *SearchByPlatformRequest, opts ...grpc.CallOption) (*GamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GamesResponse)
	err := c.cc.Invoke(ctx, Games_SearchByPlatform_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gamesClient) SearchByReleaseRange(ctx context.Context, in *SearchByReleaseRangeRequest, opts ...grpc.CallOption) (*GamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GamesResponse)
	err := c.cc.Invoke(ctx, Games_SearchByReleaseRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gamesClient) SearchByRating(ctx context.Context, in *SearchByRatingRequest, opts ...grpc.CallOption) (*GamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GamesResponse)
	err := c.cc.Invoke(ctx, Games_SearchByRating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gamesClient) AdvancedSearch(ctx context.Context, in *AdvancedSearchRequest, opts ...grpc.CallOption) (*GamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GamesResponse)
	err := c.cc.Invoke(ctx, Games_AdvancedSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gamesClient) CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*GameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameResponse)
	err := c.cc.Invoke(ctx, Games_CreateGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gamesClient) UpdateGame(ctx context.Context, in *UpdateGameRequest, opts ...grpc.CallOption) (*GameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameResponse)
	err := c.cc.Invoke(ctx, Games_UpdateGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gamesClient) DeleteGame(ctx context.Context, in *DeleteGameRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, Games_DeleteGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GamesServer is the server API for Games service.
// All implementations must embed UnimplementedGamesServer
// for forward compatibility.
type GamesServer interface {
	// ---------- Search ----------
	SearchAll(context.Context, *SearchAllRequest) (*GamesResponse, error)
	SearchByName(context.Context, *SearchByNameRequest) (*GameResponse, error)
	SearchByGenre(context.Context, *SearchByGenreRequest) (*GamesResponse, error)
	SearchByPlatform(context.Context, *SearchByPlatformRequest) (*GamesResponse, error)
	SearchByReleaseRange(context.Context, *SearchByReleaseRangeRequest) (*GamesResponse, error)
	SearchByRating(context.Context, *SearchByRatingRequest) (*GamesResponse, error)
	AdvancedSearch(context.Context, *AdvancedSearchRequest) (*GamesResponse, error)
	// ---------- Create ----------
	CreateGame(context.Context, *CreateGameRequest) (*GameResponse, error)
	// ---------- Update ----------
	UpdateGame(context.Context, *UpdateGameRequest) (*GameResponse, error)
	// ---------- Delete ----------
	DeleteGame(context.Context, *DeleteGameRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedGamesServer()
}

// UnimplementedGamesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGamesServer struct{}

func (UnimplementedGamesServer) SearchAll(context.Context, *SearchAllRequest) (*GamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAll not implemented")
}
func (UnimplementedGamesServer) SearchByName(context.Context, *SearchByNameRequest) (*GameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByName not implemented")
}
func (UnimplementedGamesServer) SearchByGenre(context.Context, *SearchByGenreRequest) (*GamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByGenre not implemented")
}
func (UnimplementedGamesServer) SearchByPlatform(context.Context, *SearchByPlatformRequest) (*GamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByPlatform not implemented")
}
func (UnimplementedGamesServer) SearchByReleaseRange(context.Context, *SearchByReleaseRangeRequest) (*GamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByReleaseRange not implemented")
}
func (UnimplementedGamesServer) SearchByRating(context.Context, *SearchByRatingRequest) (*GamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByRating not implemented")
}
func (UnimplementedGamesServer) AdvancedSearch(context.Context, *AdvancedSearchRequest) (*GamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdvancedSearch not implemented")
}
func (UnimplementedGamesServer) CreateGame(context.Context, *CreateGameRequest) (*GameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGame not implemented")
}
func (UnimplementedGamesServer) UpdateGame(context.Context, *UpdateGameRequest) (*GameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGame not implemented")
}
func (UnimplementedGamesServer) DeleteGame(context.Context, *DeleteGameRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGame not implemented")
}
func (UnimplementedGamesServer) mustEmbedUnimplementedGamesServer() {}
func (UnimplementedGamesServer) testEmbeddedByValue()               {}

// UnsafeGamesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GamesServer will
// result in compilation errors.
type UnsafeGamesServer interface {
	mustEmbedUnimplementedGamesServer()
}

func RegisterGamesServer(s grpc.ServiceRegistrar, srv GamesServer) {
	// If the following call pancis, it indicates UnimplementedGamesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Games_ServiceDesc, srv)
}

func _Games_SearchAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamesServer).SearchAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Games_SearchAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamesServer).SearchAll(ctx, req.(*SearchAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Games_SearchByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamesServer).SearchByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Games_SearchByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamesServer).SearchByName(ctx, req.(*SearchByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Games_SearchByGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchByGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamesServer).SearchByGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Games_SearchByGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamesServer).SearchByGenre(ctx, req.(*SearchByGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Games_SearchByPlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchByPlatformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamesServer).SearchByPlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Games_SearchByPlatform_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamesServer).SearchByPlatform(ctx, req.(*SearchByPlatformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Games_SearchByReleaseRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchByReleaseRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamesServer).SearchByReleaseRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Games_SearchByReleaseRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamesServer).SearchByReleaseRange(ctx, req.(*SearchByReleaseRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Games_SearchByRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchByRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamesServer).SearchByRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Games_SearchByRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamesServer).SearchByRating(ctx, req.(*SearchByRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Games_AdvancedSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdvancedSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamesServer).AdvancedSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Games_AdvancedSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamesServer).AdvancedSearch(ctx, req.(*AdvancedSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Games_CreateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamesServer).CreateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Games_CreateGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamesServer).CreateGame(ctx, req.(*CreateGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Games_UpdateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamesServer).UpdateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Games_UpdateGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamesServer).UpdateGame(ctx, req.(*UpdateGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Games_DeleteGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamesServer).DeleteGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Games_DeleteGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamesServer).DeleteGame(ctx, req.(*DeleteGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Games_ServiceDesc is the grpc.ServiceDesc for Games service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Games_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.Games",
	HandlerType: (*GamesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchAll",
			Handler:    _Games_SearchAll_Handler,
		},
		{
			MethodName: "SearchByName",
			Handler:    _Games_SearchByName_Handler,
		},
		{
			MethodName: "SearchByGenre",
			Handler:    _Games_SearchByGenre_Handler,
		},
		{
			MethodName: "SearchByPlatform",
			Handler:    _Games_SearchByPlatform_Handler,
		},
		{
			MethodName: "SearchByReleaseRange",
			Handler:    _Games_SearchByReleaseRange_Handler,
		},
		{
			MethodName: "SearchByRating",
			Handler:    _Games_SearchByRating_Handler,
		},
		{
			MethodName: "AdvancedSearch",
			Handler:    _Games_AdvancedSearch_Handler,
		},
		{
			MethodName: "CreateGame",
			Handler:    _Games_CreateGame_Handler,
		},
		{
			MethodName: "UpdateGame",
			Handler:    _Games_UpdateGame_Handler,
		},
		{
			MethodName: "DeleteGame",
			Handler:    _Games_DeleteGame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game.proto",
}
